// ==UserScript==
// @name         –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –Ω–∞ LiveLib
// @namespace    https://github.com/DevCicadaY/Libmatic
// @version      0.1
// @description  –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–∑—å—è –Ω–∞ LiveLib
// @author       DevCicadaY
// @match        https://www.livelib.ru/readers*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // –°—á–µ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
    let count = 0;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
    function getRandomDelay(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–∞—É–∑—ã
    function waitRandom(min, max) {
        const delay = getRandomDelay(min, max);
        showNotification(`‚è≥ –ñ–¥–µ–º ${delay / 1000} —Å–µ–∫...`);
        return new Promise(resolve => setTimeout(resolve, delay));
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showNotification(message) {
        const notification = document.getElementById('notification');
        const counter = document.getElementById('counter');
        const log = document.getElementById('log');
        const timestamp = new Date().toLocaleTimeString();

        log.innerHTML = `<p><strong>${timestamp}</strong> - ${message}</p>` + log.innerHTML; // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –ª–æ–≥–∞
        counter.textContent = count;

        notification.classList.add('show');
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
    async function clickButton(button) {
        await waitRandom(15000, 90000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º: –æ—Ç 15 –¥–æ 90 —Å–µ–∫—É–Ω–¥
        showNotification(`‚úÖ –ù–∞–∂–∞–ª–∏: ${button.title}`);
        button.click();
        count++;
        showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ: ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
    async function addFriends() {
        const buttons = document.querySelectorAll('a.btn-fill.btn-darkgreen[title^="–î–æ–±–∞–≤–∏—Ç—å"]');

        if (buttons.length > 0) {
            showNotification(`üîç –ù–∞–π–¥–µ–Ω–æ ${buttons.length} –∫–Ω–æ–ø–æ–∫ '–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è'.`);

            for (const button of buttons) {
                await clickButton(button);
                const randomBreak = getRandomDelay(10000, 30000); // –ü–∞—É–∑–∞ –æ—Ç 10 –¥–æ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–∫–∞
                await waitRandom(randomBreak, randomBreak);
            }

            // –ü–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥—Ä—É–∑–µ–π
            const breakTime = getRandomDelay(20 * 60 * 1000, 50 * 60 * 1000); // –ü–µ—Ä–µ—Ä—ã–≤ –æ—Ç 20 –¥–æ 50 –º–∏–Ω—É—Ç
            showNotification(`üõë –ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ ${breakTime / 60000} –º–∏–Ω—É—Ç...`);
            setTimeout(addFriends, breakTime);
        } else {
            const showMoreButton = document.querySelector('#user-friends-more a.btn-fill-empty.btn-wh');
            if (showMoreButton) {
                showNotification("üîÑ –ù–∞–∂–∏–º–∞–µ–º '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë 25'...");
                showMoreButton.click();
                await waitRandom(8000, 15000); // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–≥—Ä—É–∑–∫–æ–π
                addFriends();
            } else {
                const retryDelay = getRandomDelay(30 * 60 * 1000, 90 * 60 * 1000); // –û–∂–∏–¥–∞–Ω–∏–µ 30-90 –º–∏–Ω—É—Ç
                showNotification(`üò¥ –ù–µ—á–µ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å, –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ ${retryDelay / 60000} –º–∏–Ω—É—Ç...`);
                setTimeout(addFriends, retryDelay);
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function createNotificationBlock() {
        const notificationDiv = document.createElement('div');
        notificationDiv.id = 'notification';
        notificationDiv.className = 'notification';
        notificationDiv.innerHTML = `
            <p id="notification-text">–í –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è...</p>
            <p id="count">–î–æ–±–∞–≤–ª–µ–Ω–æ: <span id="counter">0</span> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            <div id="log"></div>
        `;
        document.body.appendChild(notificationDiv);

        // CSS –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const style = document.createElement('style');
        style.innerHTML = `
            #notification {
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background-color: rgba(0, 0, 0, 0.9);
                color: white;
                padding: 20px;
                border-radius: 12px;
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.4);
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                z-index: 9999;
                display: none;
                opacity: 0;
                transition: opacity 0.5s ease, transform 0.5s ease;
                width: auto;
                max-width: 500px;
                text-align: left;
            }

            #notification.show {
                display: block;
                opacity: 1;
                transform: translateX(-50%) translateY(0);
            }

            #notification p {
                margin: 0;
                font-size: 14px;
            }

            #count {
                font-weight: bold;
                font-size: 16px;
                margin-top: 8px;
            }

            #log {
                margin-top: 10px;
                max-height: 300px;
                overflow-y: auto;
                font-size: 12px;
                color: #ccc;
                border-top: 1px solid #444;
                padding-top: 10px;
            }

            #log p {
                margin-bottom: 5px;
            }
        `;
        document.head.appendChild(style);
    }

    // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    createNotificationBlock();
    addFriends();
})();