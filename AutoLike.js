// ==UserScript==
// @name         –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –Ω–∞ LiveLib
// @namespace    https://github.com/DevCicadaY/Libmatic
// @version      0.1
// @description  –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–∞–π–∫–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤, —Ü–∏—Ç–∞—Ç, –∏—Å—Ç–æ—Ä–∏–π –∏ –ª–∞–π—Ñ—Ö–∞–∫–æ–≤ –Ω–∞ LiveLib
// @author       DevCicadaY
// @match        https://www.livelib.ru/reviews*
// @match        https://www.livelib.ru/quotes*
// @match        https://www.livelib.ru/stories*
// @match        https://www.livelib.ru/lifehacks*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    let likeCount = 0; // –°—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    function getRandomDelay(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    function waitRandom(min, max) {
        let delay = getRandomDelay(min, max);
        showNotification(`‚è≥ –û–∂–∏–¥–∞–µ–º ${delay / 1000} —Å–µ–∫...`);
        return new Promise(resolve => setTimeout(resolve, delay));
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showNotification(message) {
        const notification = document.getElementById('notification');
        const counter = document.getElementById('counter');
        const log = document.getElementById('log');
        const timestamp = new Date().toLocaleTimeString();

        log.innerHTML = `<p><strong>${timestamp}</strong> - ${message}</p>` + log.innerHTML;
        counter.textContent = likeCount;

        notification.classList.add('show');
    }

    // –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞
    async function clickLikeButton(button) {
        await waitRandom(15000, 90000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º
        showNotification(`‚úÖ –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω: ${button.title}`);
        button.click();
        likeCount++;
        showNotification(`–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∞–π–∫–æ–≤: ${likeCount}`);
    }

    // –ü–æ–¥–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    async function loadMoreContent() {
        let loadMoreButton = document.querySelector('a.btn__show-more');

        if (loadMoreButton) {
            showNotification(`üîÑ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë'...`);
            loadMoreButton.click();
            await waitRandom(8000, 15000); // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–≥—Ä—É–∑–∫–æ–π
            likePosts();
        } else {
            showNotification(`üò¥ –ù–µ—á–µ–≥–æ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...`);
        }
    }

    // –õ–∞–π–∫–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
    async function likePosts() {
        let buttons = document.querySelectorAll('a.sab__link.popup-load-data.icon-like[title="–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"]');

        if (buttons.length > 0) {
            showNotification(`üîç –ù–∞–π–¥–µ–Ω–æ ${buttons.length} –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ª–∞–π–∫–æ–≤.`);

            for (let button of buttons) {
                if (!button.classList.contains('sab__link--active')) {
                    await clickLikeButton(button); // –õ–∞–π–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ª–∞–π–∫–Ω—É—Ç
                } else {
                    showNotification(`üí° –£–∂–µ –ª–∞–π–∫–Ω—É—Ç–æ: ${button.title}`);
                }
                let randomBreak = getRandomDelay(10000, 30000); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏
                await waitRandom(randomBreak, randomBreak);
            }

            // –ü–µ—Ä–µ—Ä—ã–≤ –ø–æ—Å–ª–µ –ª–∞–π–∫–æ–≤
            let breakTime = getRandomDelay(20 * 60 * 1000, 50 * 60 * 1000);
            showNotification(`üõë –ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ ${breakTime / 60000} –º–∏–Ω—É—Ç...`);
            setTimeout(likePosts, breakTime);
        } else {
            loadMoreContent();
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function createNotificationUI() {
        const notificationDiv = document.createElement('div');
        notificationDiv.id = 'notification';
        notificationDiv.className = 'notification';
        notificationDiv.innerHTML = `
            <p id="notification-text">–í –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∞–π–∫–∞–Ω—å—è...</p>
            <p id="count">–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∞–π–∫–æ–≤: <span id="counter">0</span></p>
            <div id="log"></div>
        `;
        document.body.appendChild(notificationDiv);

        const style = document.createElement('style');
        style.innerHTML = `
            #notification {
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background-color: rgba(0, 0, 0, 0.9);
                color: white;
                padding: 20px;
                border-radius: 12px;
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.4);
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                z-index: 9999;
                display: none;
                opacity: 0;
                transition: opacity 0.5s ease, transform 0.5s ease;
                width: auto;
                max-width: 500px;
                text-align: left;
            }

            #notification.show {
                display: block;
                opacity: 1;
                transform: translateX(-50%) translateY(0);
            }

            #notification p {
                margin: 0;
                font-size: 14px;
            }

            #count {
                font-weight: bold;
                font-size: 16px;
                margin-top: 8px;
            }

            #log {
                margin-top: 10px;
                max-height: 300px;
                overflow-y: auto;
                font-size: 12px;
                color: #ccc;
                border-top: 1px solid #444;
                padding-top: 10px;
            }

            #log p {
                margin-bottom: 5px;
            }
        `;
        document.head.appendChild(style);
    }

    // –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
    createNotificationUI();
    likePosts();
})();